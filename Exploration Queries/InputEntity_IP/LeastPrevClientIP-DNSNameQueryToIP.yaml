Id: 6aee13db-a03f-4d7d-853c-133a87fc603d
DisplayName: Least prevalent client IPs with DNS name lookup query for this IP
Description: Summary of Bottom 10 Client IP and Domain Names for a given remote IPAddress from DnsEvent Lookup Query data (set time range to +-3h when running the query)
InputEntityType: Ip
InputFields:
  - Address
OutputEntityTypes:
  - Ip
QueryPeriodBefore: 3h
QueryPeriodAfter: 3h
DataSources: []
Tactics:
  - CommandAndControl
  - Exfiltration
query: |
  let isPmDnsInstalled=toscalar(union isfuzzy=true  (datatable(Test:string)[]), (imDns| take 0) | getschema | count | project Exists=(Count>1));  // returns scalar: (1) imDns is installed, (0) imDns is not installed
  let GetAllIPByClientIP = (v_IP_Address:string){                // --- Legacy version
    (datatable(exists:int)[1] | where not(isPmDnsInstalled))     // if imDns is installed: table empty [], and join will not be calculated. 
    | join (                                                     // If imDns not installed , returns table [1], anf join is simple
      DnsEvents
      | where SubType == 'LookupQuery'
      | where IPAddresses has v_IP_Address
      | extend IP_Aux_IPAddresses = split(IPAddresses,','), IP_Address=ClientIP
      | summarize IP_Aux_StartTime=min(TimeGenerated), IP_Aux_EndTime=max(TimeGenerated), IP_Aux_DomainNames=makeset(Name), IP_Aux_Count= count() by IP_Address, IPAddresses
      | project-away IPAddresses
      | top 10 by IP_Aux_Count asc nulls last | extend exists=int(1)
      ) on exists
      | project-away exists* 
    };
  let pmGetAllIPByClientIP = (v_IP_Address:string){            // ---  Normalized Version
    (datatable(exists:int)[1] | where isPmDnsInstalled)        // if imDns not installed: table empty [], and join will not be calculated. 
    | join (                                                   // If imDns is  installed , returns table [1], and join is simple
      imDns(srcipaddr=v_IP_Address) 
      | extend IP_Aux_IPAddresses = split(ResponseName,','), IP_Address=SrcIpAddr
      | summarize IP_Aux_StartTime=min(TimeGenerated), IP_Aux_EndTime=max(TimeGenerated), IP_Aux_DomainNames=makeset(Query), IP_Aux_Count= count() by IP_Address, ResponseName
      | project-away ResponseName
      | top 10 by IP_Aux_Count asc nulls last | extend exists=int(1)
      ) on exists
      | project-away exists* 
    };
    // change <Address> value below
    union isfuzzy=true GetAllIPByClientIP('<Address>'), pmGetAllIPByClientIP('<Address>')