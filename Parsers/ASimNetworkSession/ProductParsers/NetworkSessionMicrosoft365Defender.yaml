Parser:
  Title: M365 Defender Network Sessions
  Version: '0.0'
  LastUpdated: Aug 4, 2021
Product:
  Name: M365 Defender
Normalization:
  Schema: NetworkSessions
  Version: '0.2.0'
References:
- Title: ASIM Network Session Schema
  Link: https://aka.ms/AzSentinelNetworkSessionDoc
- Title: ASIM
  Link: https:/aka.ms/AzSentinelNormalization
Description: |
  This Query Parser maps M365 Defender network events to the Azure Sentinel Information Model Network Session schema.
ParserName: vimNetworkSessionMicrosoft365Defender
ParserQuery: |
  let M365Defender=(){
  let DirectionLookup=datatable(ActionType:string,NetworkDirection:string,Outbound:boolean)[
    'ConnectionSuccess','Outbound', true
    ,'ConnectionFailed', 'Outbound', true
    ,'ConnectionRequest','Outbound', true
    ,'InboundConnectionAccepted', 'Inbound', false
    ,'ConnectionFound', 'Unknown', false
    ,'ListeningConnectionCreated', 'Listening', false 
  ]; // !! Consider how to handle all fields
  // -- Common preprocessing to both input and outbound events
  let RawNetworkEvents =
    DeviceNetworkEvents
    | extend
      // Event
      EventOriginalUid = tostring(ReportId),
      EventCount = int(1),
      EventProduct = 'M365 Defender for Endpoint',
      EventVendor = 'Microsoft',
      EventSchemaVersion = '0.1.0',
      EventStartTime = TimeGenerated,
      EventEndTime = TimeGenerated,
      EventType = 'NetworkSession',
      EventResult = iff(ActionType=='ConnectionFailed','Failure','Success'),
      UserIdType = "SID"
      DvcIdType = "MDEid"
    | project-rename
      NetworkProtocol = Protocol
      DvcFQDN = DeviceName
    | extend
      User = iff (InitiatingProcessAccountDomain == '', InitiatingProcessAccountName, strcat(InitiatingProcessAccountDomain, '\\', InitiatingProcessAccountName)),
      UsernameType = iff(InitiatingProcessAccountDomain == '','Simple', 'Windows'),
      SplitHostname = split(DvcFQDN,"."),
      UrlFQDN = extract (...)
    | extend
      SplitUrl = split(UrlFQDN)
    | extend  
      DvcHostname = SplitHostname[0],
      DvcDomain = strcat_array(array_slice(SplitHostname, 1, -1),
      UrlHostname = SplitUrl[0],
      UrlDomain = strcat_array(array_slice(SplitUrl, 1, -1),
      SrcDomainType = "FQDN",
      DvcDomainType = "FQDN",
      DstDomainType = "FQDN"
    | extend
      Dvc = DvcHostname  
    | project-rename
      DvcId = DeviceId
    | project-away SplitUrl, SplitHostname
  ;
  let OutboundNetworkEvents = 
    RawNetworkEvents
    | lookup DirectionLookup on ActionType
    | where Outbound
    | project-rename
       DstIpAddr = RemoteIP,
       SrcIpAddr = LocalIP,
       DstPort = RemotePort,
       SrcPort = LocalPort,
       SrcUsernameType = UsernameType,
       SrcUserAadId = InitiatingProcessAccountObjectId,
       SrcUserId = InitiatingProcessAccountSid,
       SrcUserUpn = InitiatingProcessAccountUpn
    | extend
       SrcUsername = User
       SrcDvcIdType = "MDEid"
    | project-rename
       DstHostname = UrlHostname,
       DstDomain = UrlDomain
    | extend  
       SrcHostname = DvcHostname,
       SrcDomain = DvcDomain
  ;
  let InboundNetworkEvents = 
    RawNetworkEvents
    | lookup DirectionLookup on ActionType
    | where not(Outbound)
    | project-rename
       SrcIpAddr = RemoteIP,
       DstIpAddr = LocalIP,
       SrcPort = RemotePort,
       DstPort = LocalPort,
       DstUsernameType = UsernameType,
       DstUserAadId = InitiatingProcessAccountObjectId,
       DstUserId = InitiatingProcessAccountSid,
       DstUserUpn = InitiatingProcessAccountUpn,
    | extend
       DstUsername = User,
       DstDvcIdType = "MDEid",
    | project-rename
       SrcHostname = UrlHostname,
       SrcDomain = UrlDomain
    | extend  
       DstHostname = DvcHostname,
       DstDomain = DvcDomain
  ;
  union (InboundNetworkEvents, OutboundNetworkEvents)  
    | project-away UrlDomain, UrlFQDN, UrlHostname
  };
  M365Defender

